export const DijkstrasAlgorithm = () => {
  return (
    <>
      <ol>
        <li className="list-item">
          Создаем именной список для храния веса кратчайшего пути до узлов
          (weights). Значения инициализируем максимально возможным значением
          числового типа, либо Infinity. Соседей корневого узла инициализируем
          значениями их веса, т.к. это кратчайший путь до них.
        </li>
        <li className="list-item">
          Создаем именной список для хранения предыдущего узла на кратчайшем
          пути (parents). Можно восстановить кратчайший путь до любого узла.
          Значения инициализируем null. Соседей корневого узла инициализируем
          этим узлом, т.к. это кратчайший путь до них.
        </li>
        <li className="list-item">
          Создаем список для хранения отработанных узлов с найденным кратчайшим
          путём (processed).
        </li>
        <li className="list-item">
          В списке с весами weights находим узел с наименьшим весом, который ещё
          не находится в processed.
        </li>
        <li className="list-item">
          Для каждого из его соседних узлов находим минимальный вес пути.
        </li>
        <li className="list-item">
          Если он меньше сохранённого ранее в списке weights, значит
          перезаписываем значение в weights и обновляем имя предыдущего узла в
          списке parents.
        </li>
        <li className="list-item">
          Узел, найденый в п.4, сохраняем в processed.
        </li>
        <li className="list-item">
          Повторяем алгоритм с п.4 до тех пор пока неотработанных узлов не
          останется.
        </li>
        <li className="list-item">
          Именные списки weights и parents содержат искомые данные.
        </li>
      </ol>
      <p>
        Функция получает направленный, положительно взвешенный, ациклический
        граф и корневой узел (source). Граф представлен обеъктом в полях
        которого находятся вершины. Каждое поле содержит подобъект с полями в
        виде соседних вершин графа и веса их рёбер. Находит кратчайший путь до
        узлов.
      </p>
    </>
  );
};
